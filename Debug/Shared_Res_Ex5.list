
Shared_Res_Ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004114  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004398  08004398  00005398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043a0  080043a0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a0  080043a0  000053a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043a4  080043a4  000053a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080043a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  20000014  080043bc  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba0  080043bc  00006ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d745  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265b  00000000  00000000  00013789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00015de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000963  00000000  00000000  00016a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002795  00000000  00000000  000173c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de6a  00000000  00000000  00019b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e389  00000000  00000000  000279c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5d4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003258  00000000  00000000  000a5d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a8fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042cc 	.word	0x080042cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080042cc 	.word	0x080042cc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <AccessSharedData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AccessSharedData(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	if (StartFlag == 1) {
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <AccessSharedData+0x44>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d10a      	bne.n	8000522 <AccessSharedData+0x22>
		StartFlag = 0; // Set StartFlag to Down (0)
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <AccessSharedData+0x44>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]

		// Simulate read/write operations
		osDelay(500); // Simulating shared resource access delay
 8000512:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000516:	f001 f9f7 	bl	8001908 <osDelay>

		StartFlag = 1; // Set StartFlag back to Up (1)
 800051a:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <AccessSharedData+0x44>)
 800051c:	2201      	movs	r2, #1
 800051e:	601a      	str	r2, [r3, #0]

		// Keep Blue LED on for 100 ms
		osDelay(100);
		HAL_GPIO_WritePin(GPIOA, blue_led_Pin, GPIO_PIN_RESET);
	}
}
 8000520:	e00e      	b.n	8000540 <AccessSharedData+0x40>
		HAL_GPIO_WritePin(GPIOA, blue_led_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000528:	4807      	ldr	r0, [pc, #28]	@ (8000548 <AccessSharedData+0x48>)
 800052a:	f000 fc93 	bl	8000e54 <HAL_GPIO_WritePin>
		osDelay(100);
 800052e:	2064      	movs	r0, #100	@ 0x64
 8000530:	f001 f9ea 	bl	8001908 <osDelay>
		HAL_GPIO_WritePin(GPIOA, blue_led_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800053a:	4803      	ldr	r0, [pc, #12]	@ (8000548 <AccessSharedData+0x48>)
 800053c:	f000 fc8a 	bl	8000e54 <HAL_GPIO_WritePin>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000000 	.word	0x20000000
 8000548:	40020000 	.word	0x40020000

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 f9b4 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f832 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f89a 	bl	8000690 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f001 f8f8 	bl	8001750 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <main+0x4c>)
 8000562:	2100      	movs	r1, #0
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <main+0x50>)
 8000566:	f001 f93d 	bl	80017e4 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0c      	ldr	r2, [pc, #48]	@ (80005a0 <main+0x54>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of GreenLed */
  GreenLedHandle = osThreadNew(GreenLedTask, NULL, &GreenLed_attributes);
 8000570:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <main+0x58>)
 8000572:	2100      	movs	r1, #0
 8000574:	480c      	ldr	r0, [pc, #48]	@ (80005a8 <main+0x5c>)
 8000576:	f001 f935 	bl	80017e4 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <main+0x60>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of RedLed */
  RedLedHandle = osThreadNew(RedLedTask, NULL, &RedLed_attributes);
 8000580:	4a0b      	ldr	r2, [pc, #44]	@ (80005b0 <main+0x64>)
 8000582:	2100      	movs	r1, #0
 8000584:	480b      	ldr	r0, [pc, #44]	@ (80005b4 <main+0x68>)
 8000586:	f001 f92d 	bl	80017e4 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <main+0x6c>)
 800058e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f001 f902 	bl	8001798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x48>
 8000598:	0800431c 	.word	0x0800431c
 800059c:	08000719 	.word	0x08000719
 80005a0:	20000030 	.word	0x20000030
 80005a4:	08004340 	.word	0x08004340
 80005a8:	08000729 	.word	0x08000729
 80005ac:	20000034 	.word	0x20000034
 80005b0:	08004364 	.word	0x08004364
 80005b4:	0800075d 	.word	0x0800075d
 80005b8:	20000038 	.word	0x20000038

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	@ 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fe44 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	@ (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800062c:	2319      	movs	r3, #25
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000630:	2390      	movs	r3, #144	@ 0x90
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fdcb 	bl	80011e0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 f89e 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fc09 	bl	8000e88 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800067c:	f000 f888 	bl	8000790 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	@ 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_GPIO_Init+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <MX_GPIO_Init+0x80>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_GPIO_Init+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_GPIO_Init+0x80>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a11      	ldr	r2, [pc, #68]	@ (8000710 <MX_GPIO_Init+0x80>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_GPIO_Init+0x80>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green_led_Pin|blue_led_Pin|red_led_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006e4:	480b      	ldr	r0, [pc, #44]	@ (8000714 <MX_GPIO_Init+0x84>)
 80006e6:	f000 fbb5 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_led_Pin blue_led_Pin red_led_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|blue_led_Pin|red_led_Pin;
 80006ea:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0x84>)
 8000704:	f000 fa32 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000

08000718 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f001 f8f1 	bl	8001908 <osDelay>
 8000726:	e7fb      	b.n	8000720 <StartDefaultTask+0x8>

08000728 <GreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLedTask */
void GreenLedTask(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLedTask */
  /* Infinite loop */
  for(;;)
  {
	  // Turn Green LED on
	  HAL_GPIO_WritePin(GPIOA, green_led_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000736:	4808      	ldr	r0, [pc, #32]	@ (8000758 <GreenLedTask+0x30>)
 8000738:	f000 fb8c 	bl	8000e54 <HAL_GPIO_WritePin>

	  // Access the shared data
	  AccessSharedData();
 800073c:	f7ff fee0 	bl	8000500 <AccessSharedData>

	  // Turn Green LED off
	  HAL_GPIO_WritePin(GPIOA, green_led_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000746:	4804      	ldr	r0, [pc, #16]	@ (8000758 <GreenLedTask+0x30>)
 8000748:	f000 fb84 	bl	8000e54 <HAL_GPIO_WritePin>

	  osDelay(500);
 800074c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000750:	f001 f8da 	bl	8001908 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, green_led_Pin, GPIO_PIN_SET);
 8000754:	bf00      	nop
 8000756:	e7eb      	b.n	8000730 <GreenLedTask+0x8>
 8000758:	40020000 	.word	0x40020000

0800075c <RedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLedTask */
void RedLedTask(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLedTask */
  /* Infinite loop */
  for(;;)
  {
	  // Turn Green LED on
	  HAL_GPIO_WritePin(GPIOA, red_led_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076a:	4808      	ldr	r0, [pc, #32]	@ (800078c <RedLedTask+0x30>)
 800076c:	f000 fb72 	bl	8000e54 <HAL_GPIO_WritePin>

	  // Access the shared data
	  AccessSharedData();
 8000770:	f7ff fec6 	bl	8000500 <AccessSharedData>

	  // Turn Green LED off
	  HAL_GPIO_WritePin(GPIOA, red_led_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077a:	4804      	ldr	r0, [pc, #16]	@ (800078c <RedLedTask+0x30>)
 800077c:	f000 fb6a 	bl	8000e54 <HAL_GPIO_WritePin>

	  osDelay(100);
 8000780:	2064      	movs	r0, #100	@ 0x64
 8000782:	f001 f8c1 	bl	8001908 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, red_led_Pin, GPIO_PIN_SET);
 8000786:	bf00      	nop
 8000788:	e7ec      	b.n	8000764 <RedLedTask+0x8>
 800078a:	bf00      	nop
 800078c:	40020000 	.word	0x40020000

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <Error_Handler+0x8>

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <HAL_MspInit+0x54>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007aa:	4a11      	ldr	r2, [pc, #68]	@ (80007f0 <HAL_MspInit+0x54>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x54>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <HAL_MspInit+0x54>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <HAL_MspInit+0x54>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ce:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_MspInit+0x54>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	f06f 0001 	mvn.w	r0, #1
 80007e2:	f000 f99a 	bl	8000b1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <NMI_Handler+0x4>

080007fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <MemManage_Handler+0x4>

0800080c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <UsageFault_Handler+0x4>

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f897 	bl	8000960 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000832:	f002 fc91 	bl	8003158 <xTaskGetSchedulerState>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d001      	beq.n	8000840 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800083c:	f003 fa8c 	bl	8003d58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <SystemInit+0x20>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084e:	4a05      	ldr	r2, [pc, #20]	@ (8000864 <SystemInit+0x20>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800086c:	f7ff ffea 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000896:	f003 fce7 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800089a:	f7ff fe57 	bl	800054c <main>
  bx  lr    
 800089e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008ac:	080043a8 	.word	0x080043a8
  ldr r2, =_sbss
 80008b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008b4:	20001ba0 	.word	0x20001ba0

080008b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c0:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	@ (80008fc <HAL_Init+0x40>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <HAL_Init+0x40>)
 80008d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	@ (80008fc <HAL_Init+0x40>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f90d 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff ff54 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023c00 	.word	0x40023c00

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f917 	bl	8000b52 <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 f8ed 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	@ (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000004 	.word	0x20000004
 8000958:	2000000c 	.word	0x2000000c
 800095c:	20000008 	.word	0x20000008

08000960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_IncTick+0x20>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_IncTick+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <HAL_IncTick+0x24>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000000c 	.word	0x2000000c
 8000984:	2000003c 	.word	0x2000003c

08000988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GetTick+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000003c 	.word	0x2000003c

080009a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009bc:	4013      	ands	r3, r2
 80009be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d2:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <__NVIC_SetPriorityGrouping+0x44>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	60d3      	str	r3, [r2, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <__NVIC_GetPriorityGrouping+0x18>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	0a1b      	lsrs	r3, r3, #8
 80009f2:	f003 0307 	and.w	r3, r3, #7
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	@ (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	@ (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	@ 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	@ 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff8e 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff47 	bl	80009a0 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff5c 	bl	80009e8 <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff8e 	bl	8000a58 <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffb0 	bl	8000ac0 <SysTick_Config>
 8000b60:	4603      	mov	r3, r0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	@ 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
 8000b86:	e14d      	b.n	8000e24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	f040 813c 	bne.w	8000e1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d005      	beq.n	8000bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d130      	bne.n	8000c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	2203      	movs	r2, #3
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	f003 0201 	and.w	r2, r3, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d017      	beq.n	8000c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d123      	bne.n	8000cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	69b9      	ldr	r1, [r7, #24]
 8000cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0203 	and.w	r2, r3, #3
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8096 	beq.w	8000e1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b51      	ldr	r3, [pc, #324]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a50      	ldr	r2, [pc, #320]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b4e      	ldr	r3, [pc, #312]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	3302      	adds	r3, #2
 8000d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	220f      	movs	r2, #15
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a43      	ldr	r2, [pc, #268]	@ (8000e44 <HAL_GPIO_Init+0x2d8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_GPIO_Init+0x1ea>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a42      	ldr	r2, [pc, #264]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d007      	beq.n	8000d52 <HAL_GPIO_Init+0x1e6>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a41      	ldr	r2, [pc, #260]	@ (8000e4c <HAL_GPIO_Init+0x2e0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_GPIO_Init+0x1e2>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d56:	2300      	movs	r3, #0
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	4935      	ldr	r1, [pc, #212]	@ (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dc4:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dca:	4b21      	ldr	r3, [pc, #132]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dee:	4a18      	ldr	r2, [pc, #96]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3301      	adds	r3, #1
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	f67f aeae 	bls.w	8000b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3724      	adds	r7, #36	@ 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40013800 	.word	0x40013800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40013c00 	.word	0x40013c00

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	619a      	str	r2, [r3, #24]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0cc      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000e9c:	4b68      	ldr	r3, [pc, #416]	@ (8001040 <HAL_RCC_ClockConfig+0x1b8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d90c      	bls.n	8000ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eaa:	4b65      	ldr	r3, [pc, #404]	@ (8001040 <HAL_RCC_ClockConfig+0x1b8>)
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eb2:	4b63      	ldr	r3, [pc, #396]	@ (8001040 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d001      	beq.n	8000ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e0b8      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d020      	beq.n	8000f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000edc:	4b59      	ldr	r3, [pc, #356]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	4a58      	ldr	r2, [pc, #352]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ef4:	4b53      	ldr	r3, [pc, #332]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000efa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f00:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	494d      	ldr	r1, [pc, #308]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d044      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d107      	bne.n	8000f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	4b47      	ldr	r3, [pc, #284]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d119      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e07f      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d003      	beq.n	8000f46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d107      	bne.n	8000f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e06f      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f56:	4b3b      	ldr	r3, [pc, #236]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e067      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f023 0203 	bic.w	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4934      	ldr	r1, [pc, #208]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f78:	f7ff fd06 	bl	8000988 <HAL_GetTick>
 8000f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f7e:	e00a      	b.n	8000f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f80:	f7ff fd02 	bl	8000988 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e04f      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f96:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 020c 	and.w	r2, r3, #12
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d1eb      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <HAL_RCC_ClockConfig+0x1b8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d20c      	bcs.n	8000fd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb6:	4b22      	ldr	r3, [pc, #136]	@ (8001040 <HAL_RCC_ClockConfig+0x1b8>)
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fbe:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <HAL_RCC_ClockConfig+0x1b8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e032      	b.n	8001036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4916      	ldr	r1, [pc, #88]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d009      	beq.n	800100e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	490e      	ldr	r1, [pc, #56]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 800100a:	4313      	orrs	r3, r2
 800100c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800100e:	f000 f821 	bl	8001054 <HAL_RCC_GetSysClockFreq>
 8001012:	4602      	mov	r2, r0
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	091b      	lsrs	r3, r3, #4
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	490a      	ldr	r1, [pc, #40]	@ (8001048 <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	5ccb      	ldrb	r3, [r1, r3]
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <HAL_RCC_ClockConfig+0x1c4>)
 8001028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_RCC_ClockConfig+0x1c8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fc66 	bl	8000900 <HAL_InitTick>

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023c00 	.word	0x40023c00
 8001044:	40023800 	.word	0x40023800
 8001048:	08004388 	.word	0x08004388
 800104c:	20000004 	.word	0x20000004
 8001050:	20000008 	.word	0x20000008

08001054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001058:	b090      	sub	sp, #64	@ 0x40
 800105a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800106c:	4b59      	ldr	r3, [pc, #356]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b08      	cmp	r3, #8
 8001076:	d00d      	beq.n	8001094 <HAL_RCC_GetSysClockFreq+0x40>
 8001078:	2b08      	cmp	r3, #8
 800107a:	f200 80a1 	bhi.w	80011c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_RCC_GetSysClockFreq+0x34>
 8001082:	2b04      	cmp	r3, #4
 8001084:	d003      	beq.n	800108e <HAL_RCC_GetSysClockFreq+0x3a>
 8001086:	e09b      	b.n	80011c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001088:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800108a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800108c:	e09b      	b.n	80011c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800108e:	4b53      	ldr	r3, [pc, #332]	@ (80011dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001090:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001092:	e098      	b.n	80011c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001094:	4b4f      	ldr	r3, [pc, #316]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800109e:	4b4d      	ldr	r3, [pc, #308]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d028      	beq.n	80010fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010aa:	4b4a      	ldr	r3, [pc, #296]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	099b      	lsrs	r3, r3, #6
 80010b0:	2200      	movs	r2, #0
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80010bc:	2100      	movs	r1, #0
 80010be:	4b47      	ldr	r3, [pc, #284]	@ (80011dc <HAL_RCC_GetSysClockFreq+0x188>)
 80010c0:	fb03 f201 	mul.w	r2, r3, r1
 80010c4:	2300      	movs	r3, #0
 80010c6:	fb00 f303 	mul.w	r3, r0, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	4a43      	ldr	r2, [pc, #268]	@ (80011dc <HAL_RCC_GetSysClockFreq+0x188>)
 80010ce:	fba0 1202 	umull	r1, r2, r0, r2
 80010d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80010d4:	460a      	mov	r2, r1
 80010d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80010d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010da:	4413      	add	r3, r2
 80010dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e0:	2200      	movs	r2, #0
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	61fa      	str	r2, [r7, #28]
 80010e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80010ee:	f7ff f88f 	bl	8000210 <__aeabi_uldivmod>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4613      	mov	r3, r2
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80010fa:	e053      	b.n	80011a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010fc:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	2200      	movs	r2, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	617a      	str	r2, [r7, #20]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800110e:	f04f 0b00 	mov.w	fp, #0
 8001112:	4652      	mov	r2, sl
 8001114:	465b      	mov	r3, fp
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	f04f 0100 	mov.w	r1, #0
 800111e:	0159      	lsls	r1, r3, #5
 8001120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001124:	0150      	lsls	r0, r2, #5
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	ebb2 080a 	subs.w	r8, r2, sl
 800112e:	eb63 090b 	sbc.w	r9, r3, fp
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800113e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001142:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001146:	ebb2 0408 	subs.w	r4, r2, r8
 800114a:	eb63 0509 	sbc.w	r5, r3, r9
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	00eb      	lsls	r3, r5, #3
 8001158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800115c:	00e2      	lsls	r2, r4, #3
 800115e:	4614      	mov	r4, r2
 8001160:	461d      	mov	r5, r3
 8001162:	eb14 030a 	adds.w	r3, r4, sl
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	eb45 030b 	adc.w	r3, r5, fp
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800117a:	4629      	mov	r1, r5
 800117c:	028b      	lsls	r3, r1, #10
 800117e:	4621      	mov	r1, r4
 8001180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001184:	4621      	mov	r1, r4
 8001186:	028a      	lsls	r2, r1, #10
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800118e:	2200      	movs	r2, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	60fa      	str	r2, [r7, #12]
 8001194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001198:	f7ff f83a 	bl	8000210 <__aeabi_uldivmod>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4613      	mov	r3, r2
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	0c1b      	lsrs	r3, r3, #16
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	3301      	adds	r3, #1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80011b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80011be:	e002      	b.n	80011c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80011c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80011c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3740      	adds	r7, #64	@ 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	00f42400 	.word	0x00f42400
 80011dc:	017d7840 	.word	0x017d7840

080011e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e273      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d075      	beq.n	80012ea <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80011fe:	4b88      	ldr	r3, [pc, #544]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b04      	cmp	r3, #4
 8001208:	d00c      	beq.n	8001224 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b85      	ldr	r3, [pc, #532]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001212:	2b08      	cmp	r3, #8
 8001214:	d112      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001216:	4b82      	ldr	r3, [pc, #520]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001222:	d10b      	bne.n	800123c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	4b7e      	ldr	r3, [pc, #504]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d05b      	beq.n	80012e8 <HAL_RCC_OscConfig+0x108>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d157      	bne.n	80012e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e24e      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001244:	d106      	bne.n	8001254 <HAL_RCC_OscConfig+0x74>
 8001246:	4b76      	ldr	r3, [pc, #472]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a75      	ldr	r2, [pc, #468]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800124c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e01d      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b70      	ldr	r3, [pc, #448]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6f      	ldr	r2, [pc, #444]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b6d      	ldr	r3, [pc, #436]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6c      	ldr	r2, [pc, #432]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e00b      	b.n	8001290 <HAL_RCC_OscConfig+0xb0>
 8001278:	4b69      	ldr	r3, [pc, #420]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a68      	ldr	r2, [pc, #416]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b66      	ldr	r3, [pc, #408]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a65      	ldr	r2, [pc, #404]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fb76 	bl	8000988 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fb72 	bl	8000988 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	@ 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e213      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0xc0>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb62 	bl	8000988 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fb5e 	bl	8000988 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e1ff      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0xe8>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d063      	beq.n	80013be <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
        || \
 800130a:	2b08      	cmp	r3, #8
 800130c:	d11c      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130e:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d116      	bne.n	8001348 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131a:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d005      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e1d3      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001332:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4937      	ldr	r1, [pc, #220]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	e03a      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d020      	beq.n	8001392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001350:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <HAL_RCC_OscConfig+0x244>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fb17 	bl	8000988 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fb13 	bl	8000988 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1b4      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4925      	ldr	r1, [pc, #148]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_RCC_OscConfig+0x244>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff faf6 	bl	8000988 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff faf2 	bl	8000988 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e193      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d036      	beq.n	8001438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_RCC_OscConfig+0x248>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fad6 	bl	8000988 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff fad2 	bl	8000988 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e173      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_RCC_OscConfig+0x240>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x200>
 80013fe:	e01b      	b.n	8001438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <HAL_RCC_OscConfig+0x248>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fabf 	bl	8000988 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	e00e      	b.n	800142c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff fabb 	bl	8000988 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d907      	bls.n	800142c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e15c      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
 8001420:	40023800 	.word	0x40023800
 8001424:	42470000 	.word	0x42470000
 8001428:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	4b8a      	ldr	r3, [pc, #552]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 800142e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1ea      	bne.n	800140e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8097 	beq.w	8001574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b83      	ldr	r3, [pc, #524]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10f      	bne.n	8001476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b7f      	ldr	r3, [pc, #508]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a7e      	ldr	r2, [pc, #504]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001476:	4b79      	ldr	r3, [pc, #484]	@ (800165c <HAL_RCC_OscConfig+0x47c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <HAL_RCC_OscConfig+0x47c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	@ (800165c <HAL_RCC_OscConfig+0x47c>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff fa7b 	bl	8000988 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fa77 	bl	8000988 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e118      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <HAL_RCC_OscConfig+0x47c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x2ea>
 80014bc:	4b66      	ldr	r3, [pc, #408]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c0:	4a65      	ldr	r2, [pc, #404]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x30c>
 80014d2:	4b61      	ldr	r3, [pc, #388]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d6:	4a60      	ldr	r2, [pc, #384]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014de:	4b5e      	ldr	r3, [pc, #376]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x324>
 80014ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f0:	4a59      	ldr	r2, [pc, #356]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f8:	4b57      	ldr	r3, [pc, #348]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014fc:	4a56      	ldr	r2, [pc, #344]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d015      	beq.n	8001538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fa3c 	bl	8000988 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001512:	e00a      	b.n	800152a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001514:	f7ff fa38 	bl	8000988 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0d7      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	4b4b      	ldr	r3, [pc, #300]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ee      	beq.n	8001514 <HAL_RCC_OscConfig+0x334>
 8001536:	e014      	b.n	8001562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fa26 	bl	8000988 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fa22 	bl	8000988 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0c1      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001556:	4b40      	ldr	r3, [pc, #256]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1ee      	bne.n	8001540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a3a      	ldr	r2, [pc, #232]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 800156e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80ad 	beq.w	80016d8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800157e:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	d060      	beq.n	800164c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d145      	bne.n	800161e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001592:	4b33      	ldr	r3, [pc, #204]	@ (8001660 <HAL_RCC_OscConfig+0x480>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff f9f6 	bl	8000988 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff f9f2 	bl	8000988 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e093      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e0:	061b      	lsls	r3, r3, #24
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e8:	071b      	lsls	r3, r3, #28
 80015ea:	491b      	ldr	r1, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x480>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff f9c7 	bl	8000988 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff f9c3 	bl	8000988 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e064      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x41e>
 800161c:	e05c      	b.n	80016d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_RCC_OscConfig+0x480>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff f9b0 	bl	8000988 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff f9ac 	bl	8000988 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e04d      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_RCC_OscConfig+0x478>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x44c>
 800164a:	e045      	b.n	80016d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e040      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000
 8001660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <HAL_RCC_OscConfig+0x504>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d030      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d129      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d122      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800169a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169c:	4293      	cmp	r3, r2
 800169e:	d119      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	085b      	lsrs	r3, r3, #1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10f      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <__NVIC_SetPriority>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	@ (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	@ (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001740:	2100      	movs	r1, #0
 8001742:	f06f 0004 	mvn.w	r0, #4
 8001746:	f7ff ffcf 	bl	80016e8 <__NVIC_SetPriority>
#endif
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001756:	f3ef 8305 	mrs	r3, IPSR
 800175a:	603b      	str	r3, [r7, #0]
  return(result);
 800175c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001762:	f06f 0305 	mvn.w	r3, #5
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	e00c      	b.n	8001784 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <osKernelInitialize+0x44>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d105      	bne.n	800177e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <osKernelInitialize+0x44>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	e002      	b.n	8001784 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000040 	.word	0x20000040

08001798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800179e:	f3ef 8305 	mrs	r3, IPSR
 80017a2:	603b      	str	r3, [r7, #0]
  return(result);
 80017a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80017aa:	f06f 0305 	mvn.w	r3, #5
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	e010      	b.n	80017d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <osKernelStart+0x48>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d109      	bne.n	80017ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80017ba:	f7ff ffbf 	bl	800173c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80017be:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <osKernelStart+0x48>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80017c4:	f001 f87a 	bl	80028bc <vTaskStartScheduler>
      stat = osOK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	e002      	b.n	80017d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000040 	.word	0x20000040

080017e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08e      	sub	sp, #56	@ 0x38
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017f4:	f3ef 8305 	mrs	r3, IPSR
 80017f8:	617b      	str	r3, [r7, #20]
  return(result);
 80017fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d17e      	bne.n	80018fe <osThreadNew+0x11a>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d07b      	beq.n	80018fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800180a:	2318      	movs	r3, #24
 800180c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d045      	beq.n	80018aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <osThreadNew+0x48>
        name = attr->name;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <osThreadNew+0x6e>
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b38      	cmp	r3, #56	@ 0x38
 8001844:	d805      	bhi.n	8001852 <osThreadNew+0x6e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <osThreadNew+0x72>
        return (NULL);
 8001852:	2300      	movs	r3, #0
 8001854:	e054      	b.n	8001900 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00e      	beq.n	800188c <osThreadNew+0xa8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b5b      	cmp	r3, #91	@ 0x5b
 8001874:	d90a      	bls.n	800188c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <osThreadNew+0xa8>
        mem = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	e010      	b.n	80018ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <osThreadNew+0xca>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d108      	bne.n	80018ae <osThreadNew+0xca>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d104      	bne.n	80018ae <osThreadNew+0xca>
          mem = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	e001      	b.n	80018ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d110      	bne.n	80018d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80018bc:	9202      	str	r2, [sp, #8]
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	6a3a      	ldr	r2, [r7, #32]
 80018c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fe1a 	bl	8002504 <xTaskCreateStatic>
 80018d0:	4603      	mov	r3, r0
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	e013      	b.n	80018fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d110      	bne.n	80018fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fe68 	bl	80025c4 <xTaskCreate>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <osThreadNew+0x11a>
            hTask = NULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80018fe:	693b      	ldr	r3, [r7, #16]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001910:	f3ef 8305 	mrs	r3, IPSR
 8001914:	60bb      	str	r3, [r7, #8]
  return(result);
 8001916:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <osDelay+0x1c>
    stat = osErrorISR;
 800191c:	f06f 0305 	mvn.w	r3, #5
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e007      	b.n	8001934 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <osDelay+0x2c>
      vTaskDelay(ticks);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 ff8e 	bl	8002850 <vTaskDelay>
    }
  }

  return (stat);
 8001934:	68fb      	ldr	r3, [r7, #12]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4a07      	ldr	r2, [pc, #28]	@ (800196c <vApplicationGetIdleTaskMemory+0x2c>)
 8001950:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <vApplicationGetIdleTaskMemory+0x30>)
 8001956:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2280      	movs	r2, #128	@ 0x80
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000044 	.word	0x20000044
 8001970:	200000a0 	.word	0x200000a0

08001974 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001984:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <vApplicationGetTimerTaskMemory+0x30>)
 800198a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	200002a0 	.word	0x200002a0
 80019a4:	200002fc 	.word	0x200002fc

080019a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0208 	add.w	r2, r3, #8
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f04f 32ff 	mov.w	r2, #4294967295
 80019c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f103 0208 	add.w	r2, r3, #8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f103 0208 	add.w	r2, r3, #8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d103      	bne.n	8001a6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e00c      	b.n	8001a84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e002      	b.n	8001a78 <vListInsert+0x2e>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d2f6      	bcs.n	8001a72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6892      	ldr	r2, [r2, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6852      	ldr	r2, [r2, #4]
 8001adc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d103      	bne.n	8001af0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	1e5a      	subs	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10b      	bne.n	8001b3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b28:	f383 8811 	msr	BASEPRI, r3
 8001b2c:	f3bf 8f6f 	isb	sy
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b3c:	f002 f87c 	bl	8003c38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	441a      	add	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	441a      	add	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	22ff      	movs	r2, #255	@ 0xff
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01a      	beq.n	8001bd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 f91a 	bl	8002dd8 <xTaskRemoveFromEventList>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <xQueueGenericReset+0xd0>)
 8001bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f3bf 8f4f 	dsb	sy
 8001bb6:	f3bf 8f6f 	isb	sy
 8001bba:	e009      	b.n	8001bd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3310      	adds	r3, #16
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fef1 	bl	80019a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3324      	adds	r3, #36	@ 0x24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff feec 	bl	80019a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bd0:	f002 f864 	bl	8003c9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000ed04 	.word	0xe000ed04

08001be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	@ 0x38
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10b      	bne.n	8001c10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bfc:	f383 8811 	msr	BASEPRI, r3
 8001c00:	f3bf 8f6f 	isb	sy
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10b      	bne.n	8001c2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c1a:	f383 8811 	msr	BASEPRI, r3
 8001c1e:	f3bf 8f6f 	isb	sy
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	e7fd      	b.n	8001c2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <xQueueGenericCreateStatic+0x56>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <xQueueGenericCreateStatic+0x5a>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <xQueueGenericCreateStatic+0x5c>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c48:	f383 8811 	msr	BASEPRI, r3
 8001c4c:	f3bf 8f6f 	isb	sy
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	623b      	str	r3, [r7, #32]
}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <xQueueGenericCreateStatic+0x84>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <xQueueGenericCreateStatic+0x88>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <xQueueGenericCreateStatic+0x8a>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	61fb      	str	r3, [r7, #28]
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	e7fd      	b.n	8001c86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c8a:	2350      	movs	r3, #80	@ 0x50
 8001c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b50      	cmp	r3, #80	@ 0x50
 8001c92:	d00b      	beq.n	8001cac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c98:	f383 8811 	msr	BASEPRI, r3
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f3bf 8f4f 	dsb	sy
 8001ca4:	61bb      	str	r3, [r7, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001cac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cc0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 f805 	bl	8001cde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3730      	adds	r7, #48	@ 0x30
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e002      	b.n	8001d00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	69b8      	ldr	r0, [r7, #24]
 8001d10:	f7ff fefe 	bl	8001b10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	@ 0x38
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10b      	bne.n	8001d58 <xQueueGenericSend+0x34>
	__asm volatile
 8001d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d52:	bf00      	nop
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d103      	bne.n	8001d66 <xQueueGenericSend+0x42>
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <xQueueGenericSend+0x46>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <xQueueGenericSend+0x48>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <xQueueGenericSend+0x64>
	__asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <xQueueGenericSend+0x72>
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <xQueueGenericSend+0x76>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <xQueueGenericSend+0x78>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <xQueueGenericSend+0x94>
	__asm volatile
 8001da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	623b      	str	r3, [r7, #32]
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001db8:	f001 f9ce 	bl	8003158 <xTaskGetSchedulerState>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <xQueueGenericSend+0xa4>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <xQueueGenericSend+0xa8>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <xQueueGenericSend+0xaa>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10b      	bne.n	8001dea <xQueueGenericSend+0xc6>
	__asm volatile
 8001dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	61fb      	str	r3, [r7, #28]
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	e7fd      	b.n	8001de6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dea:	f001 ff25 	bl	8003c38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <xQueueGenericSend+0xdc>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d129      	bne.n	8001e54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e06:	f000 fa0f 	bl	8002228 <prvCopyDataToQueue>
 8001e0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d010      	beq.n	8001e36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e16:	3324      	adds	r3, #36	@ 0x24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 ffdd 	bl	8002dd8 <xTaskRemoveFromEventList>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001e24:	4b3f      	ldr	r3, [pc, #252]	@ (8001f24 <xQueueGenericSend+0x200>)
 8001e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	f3bf 8f6f 	isb	sy
 8001e34:	e00a      	b.n	8001e4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e3c:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <xQueueGenericSend+0x200>)
 8001e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e4c:	f001 ff26 	bl	8003c9c <vPortExitCritical>
				return pdPASS;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e063      	b.n	8001f1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e5a:	f001 ff1f 	bl	8003c9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e05c      	b.n	8001f1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d106      	bne.n	8001e76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 f817 	bl	8002ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e72:	2301      	movs	r3, #1
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e76:	f001 ff11 	bl	8003c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e7a:	f000 fd87 	bl	800298c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e7e:	f001 fedb 	bl	8003c38 <vPortEnterCritical>
 8001e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8e:	d103      	bne.n	8001e98 <xQueueGenericSend+0x174>
 8001e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d103      	bne.n	8001eae <xQueueGenericSend+0x18a>
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001eae:	f001 fef5 	bl	8003c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eb2:	1d3a      	adds	r2, r7, #4
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 f806 	bl	8002ecc <xTaskCheckForTimeOut>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d124      	bne.n	8001f10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ec6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ec8:	f000 faa6 	bl	8002418 <prvIsQueueFull>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d018      	beq.n	8001f04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed4:	3310      	adds	r3, #16
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 ff2a 	bl	8002d34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ee2:	f000 fa31 	bl	8002348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ee6:	f000 fd5f 	bl	80029a8 <xTaskResumeAll>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f47f af7c 	bne.w	8001dea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <xQueueGenericSend+0x200>)
 8001ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	e772      	b.n	8001dea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f06:	f000 fa1f 	bl	8002348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f0a:	f000 fd4d 	bl	80029a8 <xTaskResumeAll>
 8001f0e:	e76c      	b.n	8001dea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f12:	f000 fa19 	bl	8002348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f16:	f000 fd47 	bl	80029a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3738      	adds	r7, #56	@ 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	e000ed04 	.word	0xe000ed04

08001f28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b090      	sub	sp, #64	@ 0x40
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <xQueueGenericSendFromISR+0x3e>
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <xQueueGenericSendFromISR+0x42>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <xQueueGenericSendFromISR+0x44>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d103      	bne.n	8001f96 <xQueueGenericSendFromISR+0x6e>
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <xQueueGenericSendFromISR+0x72>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <xQueueGenericSendFromISR+0x74>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	623b      	str	r3, [r7, #32]
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fb8:	f001 ff1e 	bl	8003df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001fbc:	f3ef 8211 	mrs	r2, BASEPRI
 8001fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	61fa      	str	r2, [r7, #28]
 8001fd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d302      	bcc.n	8001fea <xQueueGenericSendFromISR+0xc2>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d12f      	bne.n	800204a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ff0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002000:	f000 f912 	bl	8002228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002004:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d112      	bne.n	8002034 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800200e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002018:	3324      	adds	r3, #36	@ 0x24
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fedc 	bl	8002dd8 <xTaskRemoveFromEventList>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00e      	beq.n	8002044 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00b      	beq.n	8002044 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e007      	b.n	8002044 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002034:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002038:	3301      	adds	r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	b25a      	sxtb	r2, r3
 800203e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002044:	2301      	movs	r3, #1
 8002046:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002048:	e001      	b.n	800204e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800204a:	2300      	movs	r3, #0
 800204c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800204e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002050:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002058:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800205a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	@ 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	@ 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <xQueueReceive+0x32>
	__asm volatile
 800207e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	623b      	str	r3, [r7, #32]
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <xQueueReceive+0x40>
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <xQueueReceive+0x44>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <xQueueReceive+0x46>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <xQueueReceive+0x62>
	__asm volatile
 80020ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	61fb      	str	r3, [r7, #28]
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	e7fd      	b.n	80020c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020c6:	f001 f847 	bl	8003158 <xTaskGetSchedulerState>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <xQueueReceive+0x72>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <xQueueReceive+0x76>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <xQueueReceive+0x78>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <xQueueReceive+0x94>
	__asm volatile
 80020e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	61bb      	str	r3, [r7, #24]
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020f8:	f001 fd9e 	bl	8003c38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01f      	beq.n	8002148 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800210c:	f000 f8f6 	bl	80022fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	1e5a      	subs	r2, r3, #1
 8002114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002116:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00f      	beq.n	8002140 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	3310      	adds	r3, #16
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fe57 	bl	8002dd8 <xTaskRemoveFromEventList>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002130:	4b3c      	ldr	r3, [pc, #240]	@ (8002224 <xQueueReceive+0x1c0>)
 8002132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002140:	f001 fdac 	bl	8003c9c <vPortExitCritical>
				return pdPASS;
 8002144:	2301      	movs	r3, #1
 8002146:	e069      	b.n	800221c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800214e:	f001 fda5 	bl	8003c9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002152:	2300      	movs	r3, #0
 8002154:	e062      	b.n	800221c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fe9d 	bl	8002ea0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002166:	2301      	movs	r3, #1
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800216a:	f001 fd97 	bl	8003c9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800216e:	f000 fc0d 	bl	800298c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002172:	f001 fd61 	bl	8003c38 <vPortEnterCritical>
 8002176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800217c:	b25b      	sxtb	r3, r3
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d103      	bne.n	800218c <xQueueReceive+0x128>
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002192:	b25b      	sxtb	r3, r3
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d103      	bne.n	80021a2 <xQueueReceive+0x13e>
 800219a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021a2:	f001 fd7b 	bl	8003c9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021a6:	1d3a      	adds	r2, r7, #4
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fe8c 	bl	8002ecc <xTaskCheckForTimeOut>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d123      	bne.n	8002202 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021bc:	f000 f916 	bl	80023ec <prvIsQueueEmpty>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d017      	beq.n	80021f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c8:	3324      	adds	r3, #36	@ 0x24
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fdb0 	bl	8002d34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021d6:	f000 f8b7 	bl	8002348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021da:	f000 fbe5 	bl	80029a8 <xTaskResumeAll>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d189      	bne.n	80020f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <xQueueReceive+0x1c0>)
 80021e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	f3bf 8f6f 	isb	sy
 80021f4:	e780      	b.n	80020f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021f8:	f000 f8a6 	bl	8002348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021fc:	f000 fbd4 	bl	80029a8 <xTaskResumeAll>
 8002200:	e77a      	b.n	80020f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002204:	f000 f8a0 	bl	8002348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002208:	f000 fbce 	bl	80029a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800220c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800220e:	f000 f8ed 	bl	80023ec <prvIsQueueEmpty>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f43f af6f 	beq.w	80020f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800221a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800221c:	4618      	mov	r0, r3
 800221e:	3730      	adds	r7, #48	@ 0x30
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	e000ed04 	.word	0xe000ed04

08002228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d14d      	bne.n	80022ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 ff9e 	bl	8003194 <xTaskPriorityDisinherit>
 8002258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	e043      	b.n	80022ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d119      	bne.n	800229c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6858      	ldr	r0, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	461a      	mov	r2, r3
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	f002 f81c 	bl	80042b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002280:	441a      	add	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d32b      	bcc.n	80022ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	e026      	b.n	80022ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	68d8      	ldr	r0, [r3, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	461a      	mov	r2, r3
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	f002 f802 	bl	80042b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	425b      	negs	r3, r3
 80022b6:	441a      	add	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	425b      	negs	r3, r3
 80022d2:	441a      	add	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d105      	bne.n	80022ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80022f2:	697b      	ldr	r3, [r7, #20]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	441a      	add	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d303      	bcc.n	8002330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68d9      	ldr	r1, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	461a      	mov	r2, r3
 800233a:	6838      	ldr	r0, [r7, #0]
 800233c:	f001 ffb8 	bl	80042b0 <memcpy>
	}
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002350:	f001 fc72 	bl	8003c38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800235a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800235c:	e011      	b.n	8002382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3324      	adds	r3, #36	@ 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fd34 	bl	8002dd8 <xTaskRemoveFromEventList>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002376:	f000 fe0d 	bl	8002f94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	3b01      	subs	r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dce9      	bgt.n	800235e <prvUnlockQueue+0x16>
 800238a:	e000      	b.n	800238e <prvUnlockQueue+0x46>
					break;
 800238c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	22ff      	movs	r2, #255	@ 0xff
 8002392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002396:	f001 fc81 	bl	8003c9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800239a:	f001 fc4d 	bl	8003c38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023a6:	e011      	b.n	80023cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d012      	beq.n	80023d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3310      	adds	r3, #16
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fd0f 	bl	8002dd8 <xTaskRemoveFromEventList>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80023c0:	f000 fde8 	bl	8002f94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80023c4:	7bbb      	ldrb	r3, [r7, #14]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dce9      	bgt.n	80023a8 <prvUnlockQueue+0x60>
 80023d4:	e000      	b.n	80023d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80023d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	22ff      	movs	r2, #255	@ 0xff
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80023e0:	f001 fc5c 	bl	8003c9c <vPortExitCritical>
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023f4:	f001 fc20 	bl	8003c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d102      	bne.n	8002406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002400:	2301      	movs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e001      	b.n	800240a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800240a:	f001 fc47 	bl	8003c9c <vPortExitCritical>

	return xReturn;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002420:	f001 fc0a 	bl	8003c38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	429a      	cmp	r2, r3
 800242e:	d102      	bne.n	8002436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002430:	2301      	movs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e001      	b.n	800243a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800243a:	f001 fc2f 	bl	8003c9c <vPortExitCritical>

	return xReturn;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	e014      	b.n	8002482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002458:	4a0f      	ldr	r2, [pc, #60]	@ (8002498 <vQueueAddToRegistry+0x50>)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002464:	490c      	ldr	r1, [pc, #48]	@ (8002498 <vQueueAddToRegistry+0x50>)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <vQueueAddToRegistry+0x50>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800247a:	e006      	b.n	800248a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b07      	cmp	r3, #7
 8002486:	d9e7      	bls.n	8002458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200006fc 	.word	0x200006fc

0800249c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024ac:	f001 fbc4 	bl	8003c38 <vPortEnterCritical>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d103      	bne.n	80024c6 <vQueueWaitForMessageRestricted+0x2a>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80024cc:	b25b      	sxtb	r3, r3
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d2:	d103      	bne.n	80024dc <vQueueWaitForMessageRestricted+0x40>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024dc:	f001 fbde 	bl	8003c9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3324      	adds	r3, #36	@ 0x24
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fc45 	bl	8002d80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024f6:	6978      	ldr	r0, [r7, #20]
 80024f8:	f7ff ff26 	bl	8002348 <prvUnlockQueue>
	}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08e      	sub	sp, #56	@ 0x38
 8002508:	af04      	add	r7, sp, #16
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	623b      	str	r3, [r7, #32]
}
 800252a:	bf00      	nop
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10b      	bne.n	800254e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	61fb      	str	r3, [r7, #28]
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800254e:	235c      	movs	r3, #92	@ 0x5c
 8002550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b5c      	cmp	r3, #92	@ 0x5c
 8002556:	d00b      	beq.n	8002570 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	61bb      	str	r3, [r7, #24]
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002570:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01e      	beq.n	80025b6 <xTaskCreateStatic+0xb2>
 8002578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01b      	beq.n	80025b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800257e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002590:	2300      	movs	r3, #0
 8002592:	9303      	str	r3, [sp, #12]
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	9302      	str	r3, [sp, #8]
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f850 	bl	800264e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025b0:	f000 f8de 	bl	8002770 <prvAddNewTaskToReadyList>
 80025b4:	e001      	b.n	80025ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80025ba:	697b      	ldr	r3, [r7, #20]
	}
 80025bc:	4618      	mov	r0, r3
 80025be:	3728      	adds	r7, #40	@ 0x28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	@ 0x30
 80025c8:	af04      	add	r7, sp, #16
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fc4f 	bl	8003e7c <pvPortMalloc>
 80025de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00e      	beq.n	8002604 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025e6:	205c      	movs	r0, #92	@ 0x5c
 80025e8:	f001 fc48 	bl	8003e7c <pvPortMalloc>
 80025ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80025fa:	e005      	b.n	8002608 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025fc:	6978      	ldr	r0, [r7, #20]
 80025fe:	f001 fd0b 	bl	8004018 <vPortFree>
 8002602:	e001      	b.n	8002608 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	2300      	movs	r3, #0
 800261a:	9303      	str	r3, [sp, #12]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f80e 	bl	800264e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002632:	69f8      	ldr	r0, [r7, #28]
 8002634:	f000 f89c 	bl	8002770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002638:	2301      	movs	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e002      	b.n	8002644 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002644:	69bb      	ldr	r3, [r7, #24]
	}
 8002646:	4618      	mov	r0, r3
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b088      	sub	sp, #32
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800265c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	461a      	mov	r2, r3
 8002666:	21a5      	movs	r1, #165	@ 0xa5
 8002668:	f001 fdf6 	bl	8004258 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002676:	3b01      	subs	r3, #1
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f023 0307 	bic.w	r3, r3, #7
 8002684:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	617b      	str	r3, [r7, #20]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01f      	beq.n	80026ee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e012      	b.n	80026da <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	7819      	ldrb	r1, [r3, #0]
 80026bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	4413      	add	r3, r2
 80026c2:	3334      	adds	r3, #52	@ 0x34
 80026c4:	460a      	mov	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d9e9      	bls.n	80026b4 <prvInitialiseNewTask+0x66>
 80026e0:	e000      	b.n	80026e4 <prvInitialiseNewTask+0x96>
			{
				break;
 80026e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026ec:	e003      	b.n	80026f6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f8:	2b37      	cmp	r3, #55	@ 0x37
 80026fa:	d901      	bls.n	8002700 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026fc:	2337      	movs	r3, #55	@ 0x37
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002704:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800270a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270e:	2200      	movs	r2, #0
 8002710:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	3304      	adds	r3, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f966 	bl	80019e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	3318      	adds	r3, #24
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f961 	bl	80019e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800272a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	2200      	movs	r2, #0
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	69b8      	ldr	r0, [r7, #24]
 8002750:	f001 f93e 	bl	80039d0 <pxPortInitialiseStack>
 8002754:	4602      	mov	r2, r0
 8002756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002766:	bf00      	nop
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002778:	f001 fa5e 	bl	8003c38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800277c:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <prvAddNewTaskToReadyList+0xc4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	4a2c      	ldr	r2, [pc, #176]	@ (8002834 <prvAddNewTaskToReadyList+0xc4>)
 8002784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002786:	4b2c      	ldr	r3, [pc, #176]	@ (8002838 <prvAddNewTaskToReadyList+0xc8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800278e:	4a2a      	ldr	r2, [pc, #168]	@ (8002838 <prvAddNewTaskToReadyList+0xc8>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002794:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <prvAddNewTaskToReadyList+0xc4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d110      	bne.n	80027be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800279c:	f000 fc1e 	bl	8002fdc <prvInitialiseTaskLists>
 80027a0:	e00d      	b.n	80027be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027a2:	4b26      	ldr	r3, [pc, #152]	@ (800283c <prvAddNewTaskToReadyList+0xcc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027aa:	4b23      	ldr	r3, [pc, #140]	@ (8002838 <prvAddNewTaskToReadyList+0xc8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d802      	bhi.n	80027be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80027b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002838 <prvAddNewTaskToReadyList+0xc8>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <prvAddNewTaskToReadyList+0xd0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3301      	adds	r3, #1
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <prvAddNewTaskToReadyList+0xd0>)
 80027c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002840 <prvAddNewTaskToReadyList+0xd0>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <prvAddNewTaskToReadyList+0xd4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d903      	bls.n	80027e4 <prvAddNewTaskToReadyList+0x74>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	4a18      	ldr	r2, [pc, #96]	@ (8002844 <prvAddNewTaskToReadyList+0xd4>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <prvAddNewTaskToReadyList+0xd8>)
 80027f2:	441a      	add	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f7ff f901 	bl	8001a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002800:	f001 fa4c 	bl	8003c9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002804:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <prvAddNewTaskToReadyList+0xcc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <prvAddNewTaskToReadyList+0xc8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	429a      	cmp	r2, r3
 8002818:	d207      	bcs.n	800282a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800281a:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <prvAddNewTaskToReadyList+0xdc>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000c10 	.word	0x20000c10
 8002838:	2000073c 	.word	0x2000073c
 800283c:	20000c1c 	.word	0x20000c1c
 8002840:	20000c2c 	.word	0x20000c2c
 8002844:	20000c18 	.word	0x20000c18
 8002848:	20000740 	.word	0x20000740
 800284c:	e000ed04 	.word	0xe000ed04

08002850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d018      	beq.n	8002894 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <vTaskDelay+0x64>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00b      	beq.n	8002882 <vTaskDelay+0x32>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	60bb      	str	r3, [r7, #8]
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002882:	f000 f883 	bl	800298c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002886:	2100      	movs	r1, #0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fcf3 	bl	8003274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800288e:	f000 f88b 	bl	80029a8 <xTaskResumeAll>
 8002892:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <vTaskDelay+0x68>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000c38 	.word	0x20000c38
 80028b8:	e000ed04 	.word	0xe000ed04

080028bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028ca:	463a      	mov	r2, r7
 80028cc:	1d39      	adds	r1, r7, #4
 80028ce:	f107 0308 	add.w	r3, r7, #8
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f834 	bl	8001940 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	9202      	str	r2, [sp, #8]
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2300      	movs	r3, #0
 80028e8:	460a      	mov	r2, r1
 80028ea:	4922      	ldr	r1, [pc, #136]	@ (8002974 <vTaskStartScheduler+0xb8>)
 80028ec:	4822      	ldr	r0, [pc, #136]	@ (8002978 <vTaskStartScheduler+0xbc>)
 80028ee:	f7ff fe09 	bl	8002504 <xTaskCreateStatic>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4a21      	ldr	r2, [pc, #132]	@ (800297c <vTaskStartScheduler+0xc0>)
 80028f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80028f8:	4b20      	ldr	r3, [pc, #128]	@ (800297c <vTaskStartScheduler+0xc0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002900:	2301      	movs	r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e001      	b.n	800290a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d102      	bne.n	8002916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002910:	f000 fd04 	bl	800331c <xTimerCreateTimerTask>
 8002914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d116      	bne.n	800294a <vTaskStartScheduler+0x8e>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	613b      	str	r3, [r7, #16]
}
 800292e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <vTaskStartScheduler+0xc4>)
 8002932:	f04f 32ff 	mov.w	r2, #4294967295
 8002936:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002938:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <vTaskStartScheduler+0xc8>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800293e:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <vTaskStartScheduler+0xcc>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002944:	f001 f8d4 	bl	8003af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002948:	e00f      	b.n	800296a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d10b      	bne.n	800296a <vTaskStartScheduler+0xae>
	__asm volatile
 8002952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	60fb      	str	r3, [r7, #12]
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	e7fd      	b.n	8002966 <vTaskStartScheduler+0xaa>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	08004304 	.word	0x08004304
 8002978:	08002fad 	.word	0x08002fad
 800297c:	20000c34 	.word	0x20000c34
 8002980:	20000c30 	.word	0x20000c30
 8002984:	20000c1c 	.word	0x20000c1c
 8002988:	20000c14 	.word	0x20000c14

0800298c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <vTaskSuspendAll+0x18>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	4a03      	ldr	r2, [pc, #12]	@ (80029a4 <vTaskSuspendAll+0x18>)
 8002998:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	20000c38 	.word	0x20000c38

080029a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029b6:	4b42      	ldr	r3, [pc, #264]	@ (8002ac0 <xTaskResumeAll+0x118>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	603b      	str	r3, [r7, #0]
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	e7fd      	b.n	80029d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80029d6:	f001 f92f 	bl	8003c38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80029da:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <xTaskResumeAll+0x118>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3b01      	subs	r3, #1
 80029e0:	4a37      	ldr	r2, [pc, #220]	@ (8002ac0 <xTaskResumeAll+0x118>)
 80029e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029e4:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <xTaskResumeAll+0x118>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d162      	bne.n	8002ab2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029ec:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <xTaskResumeAll+0x11c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d05e      	beq.n	8002ab2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029f4:	e02f      	b.n	8002a56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029f6:	4b34      	ldr	r3, [pc, #208]	@ (8002ac8 <xTaskResumeAll+0x120>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3318      	adds	r3, #24
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f85a 	bl	8001abc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f855 	bl	8001abc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a16:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <xTaskResumeAll+0x124>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d903      	bls.n	8002a26 <xTaskResumeAll+0x7e>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	4a2a      	ldr	r2, [pc, #168]	@ (8002acc <xTaskResumeAll+0x124>)
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <xTaskResumeAll+0x128>)
 8002a34:	441a      	add	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f7fe ffe0 	bl	8001a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a46:	4b23      	ldr	r3, [pc, #140]	@ (8002ad4 <xTaskResumeAll+0x12c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <xTaskResumeAll+0x130>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <xTaskResumeAll+0x120>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1cb      	bne.n	80029f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a64:	f000 fb58 	bl	8003118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a68:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <xTaskResumeAll+0x134>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a74:	f000 f846 	bl	8002b04 <xTaskIncrementTick>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <xTaskResumeAll+0x130>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f1      	bne.n	8002a74 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <xTaskResumeAll+0x134>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a96:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <xTaskResumeAll+0x130>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <xTaskResumeAll+0x138>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ab2:	f001 f8f3 	bl	8003c9c <vPortExitCritical>

	return xAlreadyYielded;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000c38 	.word	0x20000c38
 8002ac4:	20000c10 	.word	0x20000c10
 8002ac8:	20000bd0 	.word	0x20000bd0
 8002acc:	20000c18 	.word	0x20000c18
 8002ad0:	20000740 	.word	0x20000740
 8002ad4:	2000073c 	.word	0x2000073c
 8002ad8:	20000c24 	.word	0x20000c24
 8002adc:	20000c20 	.word	0x20000c20
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <xTaskGetTickCount+0x1c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002af0:	687b      	ldr	r3, [r7, #4]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000c14 	.word	0x20000c14

08002b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8002c4c <xTaskIncrementTick+0x148>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 8090 	bne.w	8002c38 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b18:	4b4d      	ldr	r3, [pc, #308]	@ (8002c50 <xTaskIncrementTick+0x14c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b20:	4a4b      	ldr	r2, [pc, #300]	@ (8002c50 <xTaskIncrementTick+0x14c>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d121      	bne.n	8002b70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b2c:	4b49      	ldr	r3, [pc, #292]	@ (8002c54 <xTaskIncrementTick+0x150>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	603b      	str	r3, [r7, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	e7fd      	b.n	8002b4a <xTaskIncrementTick+0x46>
 8002b4e:	4b41      	ldr	r3, [pc, #260]	@ (8002c54 <xTaskIncrementTick+0x150>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	4b40      	ldr	r3, [pc, #256]	@ (8002c58 <xTaskIncrementTick+0x154>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a3e      	ldr	r2, [pc, #248]	@ (8002c54 <xTaskIncrementTick+0x150>)
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c58 <xTaskIncrementTick+0x154>)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <xTaskIncrementTick+0x158>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a3c      	ldr	r2, [pc, #240]	@ (8002c5c <xTaskIncrementTick+0x158>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	f000 fad4 	bl	8003118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b70:	4b3b      	ldr	r3, [pc, #236]	@ (8002c60 <xTaskIncrementTick+0x15c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d349      	bcc.n	8002c0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7a:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <xTaskIncrementTick+0x150>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d104      	bne.n	8002b8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b84:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <xTaskIncrementTick+0x15c>)
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	601a      	str	r2, [r3, #0]
					break;
 8002b8c:	e03f      	b.n	8002c0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8e:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <xTaskIncrementTick+0x150>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d203      	bcs.n	8002bae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c60 <xTaskIncrementTick+0x15c>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002bac:	e02f      	b.n	8002c0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ff82 	bl	8001abc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	3318      	adds	r3, #24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ff79 	bl	8001abc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bce:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <xTaskIncrementTick+0x160>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d903      	bls.n	8002bde <xTaskIncrementTick+0xda>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	4a22      	ldr	r2, [pc, #136]	@ (8002c64 <xTaskIncrementTick+0x160>)
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4a1f      	ldr	r2, [pc, #124]	@ (8002c68 <xTaskIncrementTick+0x164>)
 8002bec:	441a      	add	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f7fe ff04 	bl	8001a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <xTaskIncrementTick+0x168>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3b8      	bcc.n	8002b7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c0c:	e7b5      	b.n	8002b7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c0e:	4b17      	ldr	r3, [pc, #92]	@ (8002c6c <xTaskIncrementTick+0x168>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c14:	4914      	ldr	r1, [pc, #80]	@ (8002c68 <xTaskIncrementTick+0x164>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d901      	bls.n	8002c2a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002c2a:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <xTaskIncrementTick+0x16c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e004      	b.n	8002c42 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002c38:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <xTaskIncrementTick+0x170>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <xTaskIncrementTick+0x170>)
 8002c40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002c42:	697b      	ldr	r3, [r7, #20]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000c38 	.word	0x20000c38
 8002c50:	20000c14 	.word	0x20000c14
 8002c54:	20000bc8 	.word	0x20000bc8
 8002c58:	20000bcc 	.word	0x20000bcc
 8002c5c:	20000c28 	.word	0x20000c28
 8002c60:	20000c30 	.word	0x20000c30
 8002c64:	20000c18 	.word	0x20000c18
 8002c68:	20000740 	.word	0x20000740
 8002c6c:	2000073c 	.word	0x2000073c
 8002c70:	20000c24 	.word	0x20000c24
 8002c74:	20000c20 	.word	0x20000c20

08002c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c7e:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <vTaskSwitchContext+0xa8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c86:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <vTaskSwitchContext+0xac>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002c8c:	e042      	b.n	8002d14 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002c8e:	4b25      	ldr	r3, [pc, #148]	@ (8002d24 <vTaskSwitchContext+0xac>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c94:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <vTaskSwitchContext+0xb0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e011      	b.n	8002cc0 <vTaskSwitchContext+0x48>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10b      	bne.n	8002cba <vTaskSwitchContext+0x42>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	607b      	str	r3, [r7, #4]
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	e7fd      	b.n	8002cb6 <vTaskSwitchContext+0x3e>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	491a      	ldr	r1, [pc, #104]	@ (8002d2c <vTaskSwitchContext+0xb4>)
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0e3      	beq.n	8002c9c <vTaskSwitchContext+0x24>
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4a13      	ldr	r2, [pc, #76]	@ (8002d2c <vTaskSwitchContext+0xb4>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d104      	bne.n	8002d04 <vTaskSwitchContext+0x8c>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <vTaskSwitchContext+0xb8>)
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <vTaskSwitchContext+0xb0>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	20000c38 	.word	0x20000c38
 8002d24:	20000c24 	.word	0x20000c24
 8002d28:	20000c18 	.word	0x20000c18
 8002d2c:	20000740 	.word	0x20000740
 8002d30:	2000073c 	.word	0x2000073c

08002d34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	60fb      	str	r3, [r7, #12]
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d5c:	4b07      	ldr	r3, [pc, #28]	@ (8002d7c <vTaskPlaceOnEventList+0x48>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3318      	adds	r3, #24
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe fe70 	bl	8001a4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	6838      	ldr	r0, [r7, #0]
 8002d6e:	f000 fa81 	bl	8003274 <prvAddCurrentTaskToDelayedList>
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000073c 	.word	0x2000073c

08002d80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10b      	bne.n	8002daa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	617b      	str	r3, [r7, #20]
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	e7fd      	b.n	8002da6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3318      	adds	r3, #24
 8002db0:	4619      	mov	r1, r3
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f7fe fe25 	bl	8001a02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	f000 fa54 	bl	8003274 <prvAddCurrentTaskToDelayedList>
	}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	2000073c 	.word	0x2000073c

08002dd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	60fb      	str	r3, [r7, #12]
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	e7fd      	b.n	8002e02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe fe56 	bl	8001abc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e10:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <xTaskRemoveFromEventList+0xb0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11d      	bne.n	8002e54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fe4d 	bl	8001abc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e26:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <xTaskRemoveFromEventList+0xb4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d903      	bls.n	8002e36 <xTaskRemoveFromEventList+0x5e>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	4a16      	ldr	r2, [pc, #88]	@ (8002e8c <xTaskRemoveFromEventList+0xb4>)
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4a13      	ldr	r2, [pc, #76]	@ (8002e90 <xTaskRemoveFromEventList+0xb8>)
 8002e44:	441a      	add	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f7fe fdd8 	bl	8001a02 <vListInsertEnd>
 8002e52:	e005      	b.n	8002e60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	3318      	adds	r3, #24
 8002e58:	4619      	mov	r1, r3
 8002e5a:	480e      	ldr	r0, [pc, #56]	@ (8002e94 <xTaskRemoveFromEventList+0xbc>)
 8002e5c:	f7fe fdd1 	bl	8001a02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <xTaskRemoveFromEventList+0xc0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d905      	bls.n	8002e7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <xTaskRemoveFromEventList+0xc4>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e001      	b.n	8002e7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002e7e:	697b      	ldr	r3, [r7, #20]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000c38 	.word	0x20000c38
 8002e8c:	20000c18 	.word	0x20000c18
 8002e90:	20000740 	.word	0x20000740
 8002e94:	20000bd0 	.word	0x20000bd0
 8002e98:	2000073c 	.word	0x2000073c
 8002e9c:	20000c24 	.word	0x20000c24

08002ea0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <vTaskInternalSetTimeOutState+0x24>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <vTaskInternalSetTimeOutState+0x28>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	605a      	str	r2, [r3, #4]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	20000c28 	.word	0x20000c28
 8002ec8:	20000c14 	.word	0x20000c14

08002ecc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10b      	bne.n	8002ef4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	613b      	str	r3, [r7, #16]
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	60fb      	str	r3, [r7, #12]
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	e7fd      	b.n	8002f0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002f12:	f000 fe91 	bl	8003c38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002f16:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <xTaskCheckForTimeOut+0xc0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d102      	bne.n	8002f36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	e023      	b.n	8002f7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b15      	ldr	r3, [pc, #84]	@ (8002f90 <xTaskCheckForTimeOut+0xc4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d007      	beq.n	8002f52 <xTaskCheckForTimeOut+0x86>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e015      	b.n	8002f7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d20b      	bcs.n	8002f74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff99 	bl	8002ea0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	e004      	b.n	8002f7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002f7e:	f000 fe8d 	bl	8003c9c <vPortExitCritical>

	return xReturn;
 8002f82:	69fb      	ldr	r3, [r7, #28]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000c14 	.word	0x20000c14
 8002f90:	20000c28 	.word	0x20000c28

08002f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <vTaskMissedYield+0x14>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	20000c24 	.word	0x20000c24

08002fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002fb4:	f000 f852 	bl	800305c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <prvIdleTask+0x28>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d9f9      	bls.n	8002fb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002fc0:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <prvIdleTask+0x2c>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fd0:	e7f0      	b.n	8002fb4 <prvIdleTask+0x8>
 8002fd2:	bf00      	nop
 8002fd4:	20000740 	.word	0x20000740
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	e00c      	b.n	8003002 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <prvInitialiseTaskLists+0x60>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fcd6 	bl	80019a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3301      	adds	r3, #1
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b37      	cmp	r3, #55	@ 0x37
 8003006:	d9ef      	bls.n	8002fe8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003008:	480d      	ldr	r0, [pc, #52]	@ (8003040 <prvInitialiseTaskLists+0x64>)
 800300a:	f7fe fccd 	bl	80019a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800300e:	480d      	ldr	r0, [pc, #52]	@ (8003044 <prvInitialiseTaskLists+0x68>)
 8003010:	f7fe fcca 	bl	80019a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003014:	480c      	ldr	r0, [pc, #48]	@ (8003048 <prvInitialiseTaskLists+0x6c>)
 8003016:	f7fe fcc7 	bl	80019a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800301a:	480c      	ldr	r0, [pc, #48]	@ (800304c <prvInitialiseTaskLists+0x70>)
 800301c:	f7fe fcc4 	bl	80019a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003020:	480b      	ldr	r0, [pc, #44]	@ (8003050 <prvInitialiseTaskLists+0x74>)
 8003022:	f7fe fcc1 	bl	80019a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <prvInitialiseTaskLists+0x78>)
 8003028:	4a05      	ldr	r2, [pc, #20]	@ (8003040 <prvInitialiseTaskLists+0x64>)
 800302a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800302c:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <prvInitialiseTaskLists+0x7c>)
 800302e:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <prvInitialiseTaskLists+0x68>)
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000740 	.word	0x20000740
 8003040:	20000ba0 	.word	0x20000ba0
 8003044:	20000bb4 	.word	0x20000bb4
 8003048:	20000bd0 	.word	0x20000bd0
 800304c:	20000be4 	.word	0x20000be4
 8003050:	20000bfc 	.word	0x20000bfc
 8003054:	20000bc8 	.word	0x20000bc8
 8003058:	20000bcc 	.word	0x20000bcc

0800305c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003062:	e019      	b.n	8003098 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003064:	f000 fde8 	bl	8003c38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003068:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <prvCheckTasksWaitingTermination+0x50>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fd21 	bl	8001abc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <prvCheckTasksWaitingTermination+0x54>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	3b01      	subs	r3, #1
 8003080:	4a0b      	ldr	r2, [pc, #44]	@ (80030b0 <prvCheckTasksWaitingTermination+0x54>)
 8003082:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003084:	4b0b      	ldr	r3, [pc, #44]	@ (80030b4 <prvCheckTasksWaitingTermination+0x58>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <prvCheckTasksWaitingTermination+0x58>)
 800308c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800308e:	f000 fe05 	bl	8003c9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f810 	bl	80030b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <prvCheckTasksWaitingTermination+0x58>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e1      	bne.n	8003064 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000be4 	.word	0x20000be4
 80030b0:	20000c10 	.word	0x20000c10
 80030b4:	20000bf8 	.word	0x20000bf8

080030b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ffa2 	bl	8004018 <vPortFree>
				vPortFree( pxTCB );
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 ff9f 	bl	8004018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030da:	e019      	b.n	8003110 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d103      	bne.n	80030ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 ff96 	bl	8004018 <vPortFree>
	}
 80030ec:	e010      	b.n	8003110 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d00b      	beq.n	8003110 <prvDeleteTCB+0x58>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	60fb      	str	r3, [r7, #12]
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <prvDeleteTCB+0x54>
	}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <prvResetNextTaskUnblockTime+0x38>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003128:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <prvResetNextTaskUnblockTime+0x3c>)
 800312a:	f04f 32ff 	mov.w	r2, #4294967295
 800312e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003130:	e008      	b.n	8003144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <prvResetNextTaskUnblockTime+0x38>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <prvResetNextTaskUnblockTime+0x3c>)
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	20000bc8 	.word	0x20000bc8
 8003154:	20000c30 	.word	0x20000c30

08003158 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800315e:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <xTaskGetSchedulerState+0x34>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003166:	2301      	movs	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	e008      	b.n	800317e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <xTaskGetSchedulerState+0x38>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003174:	2302      	movs	r3, #2
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	e001      	b.n	800317e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800317e:	687b      	ldr	r3, [r7, #4]
	}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	20000c1c 	.word	0x20000c1c
 8003190:	20000c38 	.word	0x20000c38

08003194 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d058      	beq.n	800325c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80031aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003268 <xTaskPriorityDisinherit+0xd4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d00b      	beq.n	80031cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	60fb      	str	r3, [r7, #12]
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60bb      	str	r3, [r7, #8]
}
 80031e6:	bf00      	nop
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	429a      	cmp	r2, r3
 8003200:	d02c      	beq.n	800325c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d128      	bne.n	800325c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3304      	adds	r3, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fc54 	bl	8001abc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <xTaskPriorityDisinherit+0xd8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d903      	bls.n	800323c <xTaskPriorityDisinherit+0xa8>
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003238:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <xTaskPriorityDisinherit+0xd8>)
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <xTaskPriorityDisinherit+0xdc>)
 800324a:	441a      	add	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	3304      	adds	r3, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f7fe fbd5 	bl	8001a02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800325c:	697b      	ldr	r3, [r7, #20]
	}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000073c 	.word	0x2000073c
 800326c:	20000c18 	.word	0x20000c18
 8003270:	20000740 	.word	0x20000740

08003274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800327e:	4b21      	ldr	r3, [pc, #132]	@ (8003304 <prvAddCurrentTaskToDelayedList+0x90>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003284:	4b20      	ldr	r3, [pc, #128]	@ (8003308 <prvAddCurrentTaskToDelayedList+0x94>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fc16 	bl	8001abc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d10a      	bne.n	80032ae <prvAddCurrentTaskToDelayedList+0x3a>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <prvAddCurrentTaskToDelayedList+0x94>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4819      	ldr	r0, [pc, #100]	@ (800330c <prvAddCurrentTaskToDelayedList+0x98>)
 80032a8:	f7fe fbab 	bl	8001a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032ac:	e026      	b.n	80032fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <prvAddCurrentTaskToDelayedList+0x94>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d209      	bcs.n	80032da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032c6:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <prvAddCurrentTaskToDelayedList+0x9c>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <prvAddCurrentTaskToDelayedList+0x94>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7fe fbb9 	bl	8001a4a <vListInsert>
}
 80032d8:	e010      	b.n	80032fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032da:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <prvAddCurrentTaskToDelayedList+0x94>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7fe fbaf 	bl	8001a4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80032ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d202      	bcs.n	80032fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80032f6:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000c14 	.word	0x20000c14
 8003308:	2000073c 	.word	0x2000073c
 800330c:	20000bfc 	.word	0x20000bfc
 8003310:	20000bcc 	.word	0x20000bcc
 8003314:	20000bc8 	.word	0x20000bc8
 8003318:	20000c30 	.word	0x20000c30

0800331c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003326:	f000 fb13 	bl	8003950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <xTimerCreateTimerTask+0x84>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d021      	beq.n	8003376 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800333a:	1d3a      	adds	r2, r7, #4
 800333c:	f107 0108 	add.w	r1, r7, #8
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fb15 	bl	8001974 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	9202      	str	r2, [sp, #8]
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	2302      	movs	r3, #2
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	460a      	mov	r2, r1
 800335c:	4911      	ldr	r1, [pc, #68]	@ (80033a4 <xTimerCreateTimerTask+0x88>)
 800335e:	4812      	ldr	r0, [pc, #72]	@ (80033a8 <xTimerCreateTimerTask+0x8c>)
 8003360:	f7ff f8d0 	bl	8002504 <xTaskCreateStatic>
 8003364:	4603      	mov	r3, r0
 8003366:	4a11      	ldr	r2, [pc, #68]	@ (80033ac <xTimerCreateTimerTask+0x90>)
 8003368:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800336a:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <xTimerCreateTimerTask+0x90>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003372:	2301      	movs	r3, #1
 8003374:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	613b      	str	r3, [r7, #16]
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000c6c 	.word	0x20000c6c
 80033a4:	0800430c 	.word	0x0800430c
 80033a8:	080034e9 	.word	0x080034e9
 80033ac:	20000c70 	.word	0x20000c70

080033b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	@ 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10b      	bne.n	80033e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	623b      	str	r3, [r7, #32]
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	e7fd      	b.n	80033dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80033e0:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <xTimerGenericCommand+0x98>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02a      	beq.n	800343e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	dc18      	bgt.n	800342c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033fa:	f7ff fead 	bl	8003158 <xTaskGetSchedulerState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b02      	cmp	r3, #2
 8003402:	d109      	bne.n	8003418 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003404:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <xTimerGenericCommand+0x98>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	f107 0110 	add.w	r1, r7, #16
 800340c:	2300      	movs	r3, #0
 800340e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003410:	f7fe fc88 	bl	8001d24 <xQueueGenericSend>
 8003414:	6278      	str	r0, [r7, #36]	@ 0x24
 8003416:	e012      	b.n	800343e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <xTimerGenericCommand+0x98>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	f107 0110 	add.w	r1, r7, #16
 8003420:	2300      	movs	r3, #0
 8003422:	2200      	movs	r2, #0
 8003424:	f7fe fc7e 	bl	8001d24 <xQueueGenericSend>
 8003428:	6278      	str	r0, [r7, #36]	@ 0x24
 800342a:	e008      	b.n	800343e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <xTimerGenericCommand+0x98>)
 800342e:	6818      	ldr	r0, [r3, #0]
 8003430:	f107 0110 	add.w	r1, r7, #16
 8003434:	2300      	movs	r3, #0
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	f7fe fd76 	bl	8001f28 <xQueueGenericSendFromISR>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003440:	4618      	mov	r0, r3
 8003442:	3728      	adds	r7, #40	@ 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000c6c 	.word	0x20000c6c

0800344c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003456:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <prvProcessExpiredTimer+0x98>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3304      	adds	r3, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fb29 	bl	8001abc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d023      	beq.n	80034c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	18d1      	adds	r1, r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f000 f8d5 	bl	8003634 <prvInsertTimerInActiveList>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	2100      	movs	r1, #0
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff88 	bl	80033b0 <xTimerGenericCommand>
 80034a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d114      	bne.n	80034d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	60fb      	str	r3, [r7, #12]
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	e7fd      	b.n	80034bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	4798      	blx	r3
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000c64 	.word	0x20000c64

080034e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f859 	bl	80035ac <prvGetNextExpireTime>
 80034fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4619      	mov	r1, r3
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f805 	bl	8003510 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003506:	f000 f8d7 	bl	80036b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800350a:	bf00      	nop
 800350c:	e7f0      	b.n	80034f0 <prvTimerTask+0x8>
	...

08003510 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800351a:	f7ff fa37 	bl	800298c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f866 	bl	80035f4 <prvSampleTimeNow>
 8003528:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d130      	bne.n	8003592 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <prvProcessTimerOrBlockTask+0x3c>
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	429a      	cmp	r2, r3
 800353c:	d806      	bhi.n	800354c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800353e:	f7ff fa33 	bl	80029a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003542:	68f9      	ldr	r1, [r7, #12]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff81 	bl	800344c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800354a:	e024      	b.n	8003596 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003552:	4b13      	ldr	r3, [pc, #76]	@ (80035a0 <prvProcessTimerOrBlockTask+0x90>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <prvProcessTimerOrBlockTask+0x50>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <prvProcessTimerOrBlockTask+0x52>
 8003560:	2300      	movs	r3, #0
 8003562:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003564:	4b0f      	ldr	r3, [pc, #60]	@ (80035a4 <prvProcessTimerOrBlockTask+0x94>)
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	f7fe ff93 	bl	800249c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003576:	f7ff fa17 	bl	80029a8 <xTaskResumeAll>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10a      	bne.n	8003596 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003580:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <prvProcessTimerOrBlockTask+0x98>)
 8003582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	f3bf 8f6f 	isb	sy
}
 8003590:	e001      	b.n	8003596 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003592:	f7ff fa09 	bl	80029a8 <xTaskResumeAll>
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000c68 	.word	0x20000c68
 80035a4:	20000c6c 	.word	0x20000c6c
 80035a8:	e000ed04 	.word	0xe000ed04

080035ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <prvGetNextExpireTime+0x44>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <prvGetNextExpireTime+0x16>
 80035be:	2201      	movs	r2, #1
 80035c0:	e000      	b.n	80035c4 <prvGetNextExpireTime+0x18>
 80035c2:	2200      	movs	r2, #0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80035d0:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <prvGetNextExpireTime+0x44>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	e001      	b.n	80035e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80035e0:	68fb      	ldr	r3, [r7, #12]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000c64 	.word	0x20000c64

080035f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80035fc:	f7ff fa72 	bl	8002ae4 <xTaskGetTickCount>
 8003600:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <prvSampleTimeNow+0x3c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	429a      	cmp	r2, r3
 800360a:	d205      	bcs.n	8003618 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800360c:	f000 f93a 	bl	8003884 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e002      	b.n	800361e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800361e:	4a04      	ldr	r2, [pc, #16]	@ (8003630 <prvSampleTimeNow+0x3c>)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003624:	68fb      	ldr	r3, [r7, #12]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000c74 	.word	0x20000c74

08003634 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	429a      	cmp	r2, r3
 8003658:	d812      	bhi.n	8003680 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	429a      	cmp	r2, r3
 8003666:	d302      	bcc.n	800366e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003668:	2301      	movs	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e01b      	b.n	80036a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800366e:	4b10      	ldr	r3, [pc, #64]	@ (80036b0 <prvInsertTimerInActiveList+0x7c>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3304      	adds	r3, #4
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7fe f9e6 	bl	8001a4a <vListInsert>
 800367e:	e012      	b.n	80036a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d206      	bcs.n	8003696 <prvInsertTimerInActiveList+0x62>
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d302      	bcc.n	8003696 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e007      	b.n	80036a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <prvInsertTimerInActiveList+0x80>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3304      	adds	r3, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7fe f9d2 	bl	8001a4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80036a6:	697b      	ldr	r3, [r7, #20]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000c68 	.word	0x20000c68
 80036b4:	20000c64 	.word	0x20000c64

080036b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	@ 0x38
 80036bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80036be:	e0ce      	b.n	800385e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	da19      	bge.n	80036fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	3304      	adds	r3, #4
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	61fb      	str	r3, [r7, #28]
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	e7fd      	b.n	80036e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	6850      	ldr	r0, [r2, #4]
 80036f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f4:	6892      	ldr	r2, [r2, #8]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f2c0 80ae 	blt.w	800385e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	3304      	adds	r3, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe f9d2 	bl	8001abc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003718:	463b      	mov	r3, r7
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff6a 	bl	80035f4 <prvSampleTimeNow>
 8003720:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b09      	cmp	r3, #9
 8003726:	f200 8097 	bhi.w	8003858 <prvProcessReceivedCommands+0x1a0>
 800372a:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <prvProcessReceivedCommands+0x78>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	08003759 	.word	0x08003759
 8003734:	08003759 	.word	0x08003759
 8003738:	08003759 	.word	0x08003759
 800373c:	080037cf 	.word	0x080037cf
 8003740:	080037e3 	.word	0x080037e3
 8003744:	0800382f 	.word	0x0800382f
 8003748:	08003759 	.word	0x08003759
 800374c:	08003759 	.word	0x08003759
 8003750:	080037cf 	.word	0x080037cf
 8003754:	080037e3 	.word	0x080037e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	b2da      	uxtb	r2, r3
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	18d1      	adds	r1, r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003778:	f7ff ff5c 	bl	8003634 <prvInsertTimerInActiveList>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d06c      	beq.n	800385c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003788:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800378a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d061      	beq.n	800385c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	441a      	add	r2, r3
 80037a0:	2300      	movs	r3, #0
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037aa:	f7ff fe01 	bl	80033b0 <xTimerGenericCommand>
 80037ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d152      	bne.n	800385c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	61bb      	str	r3, [r7, #24]
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	e7fd      	b.n	80037ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80037ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80037e0:	e03d      	b.n	800385e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	617b      	str	r3, [r7, #20]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	18d1      	adds	r1, r2, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003828:	f7ff ff04 	bl	8003634 <prvInsertTimerInActiveList>
					break;
 800382c:	e017      	b.n	800385e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800383c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800383e:	f000 fbeb 	bl	8004018 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003842:	e00c      	b.n	800385e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	b2da      	uxtb	r2, r3
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003856:	e002      	b.n	800385e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <prvProcessReceivedCommands+0x1a6>
					break;
 800385c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800385e:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <prvProcessReceivedCommands+0x1c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1d39      	adds	r1, r7, #4
 8003864:	2200      	movs	r2, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fbfc 	bl	8002064 <xQueueReceive>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f af26 	bne.w	80036c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	3730      	adds	r7, #48	@ 0x30
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000c6c 	.word	0x20000c6c

08003884 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800388a:	e049      	b.n	8003920 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800388c:	4b2e      	ldr	r3, [pc, #184]	@ (8003948 <prvSwitchTimerLists+0xc4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003896:	4b2c      	ldr	r3, [pc, #176]	@ (8003948 <prvSwitchTimerLists+0xc4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fe f909 	bl	8001abc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02f      	beq.n	8003920 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d90e      	bls.n	80038f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038de:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <prvSwitchTimerLists+0xc4>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe f8ae 	bl	8001a4a <vListInsert>
 80038ee:	e017      	b.n	8003920 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038f0:	2300      	movs	r3, #0
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2300      	movs	r3, #0
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	2100      	movs	r1, #0
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff fd58 	bl	80033b0 <xTimerGenericCommand>
 8003900:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	603b      	str	r3, [r7, #0]
}
 800391a:	bf00      	nop
 800391c:	bf00      	nop
 800391e:	e7fd      	b.n	800391c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003920:	4b09      	ldr	r3, [pc, #36]	@ (8003948 <prvSwitchTimerLists+0xc4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1b0      	bne.n	800388c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800392a:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <prvSwitchTimerLists+0xc4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <prvSwitchTimerLists+0xc8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <prvSwitchTimerLists+0xc4>)
 8003936:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003938:	4a04      	ldr	r2, [pc, #16]	@ (800394c <prvSwitchTimerLists+0xc8>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	6013      	str	r3, [r2, #0]
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000c64 	.word	0x20000c64
 800394c:	20000c68 	.word	0x20000c68

08003950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003956:	f000 f96f 	bl	8003c38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <prvCheckForValidListAndQueue+0x60>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d120      	bne.n	80039a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003962:	4814      	ldr	r0, [pc, #80]	@ (80039b4 <prvCheckForValidListAndQueue+0x64>)
 8003964:	f7fe f820 	bl	80019a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003968:	4813      	ldr	r0, [pc, #76]	@ (80039b8 <prvCheckForValidListAndQueue+0x68>)
 800396a:	f7fe f81d 	bl	80019a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <prvCheckForValidListAndQueue+0x6c>)
 8003970:	4a10      	ldr	r2, [pc, #64]	@ (80039b4 <prvCheckForValidListAndQueue+0x64>)
 8003972:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003974:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <prvCheckForValidListAndQueue+0x70>)
 8003976:	4a10      	ldr	r2, [pc, #64]	@ (80039b8 <prvCheckForValidListAndQueue+0x68>)
 8003978:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800397a:	2300      	movs	r3, #0
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <prvCheckForValidListAndQueue+0x74>)
 8003980:	4a11      	ldr	r2, [pc, #68]	@ (80039c8 <prvCheckForValidListAndQueue+0x78>)
 8003982:	2110      	movs	r1, #16
 8003984:	200a      	movs	r0, #10
 8003986:	f7fe f92d 	bl	8001be4 <xQueueGenericCreateStatic>
 800398a:	4603      	mov	r3, r0
 800398c:	4a08      	ldr	r2, [pc, #32]	@ (80039b0 <prvCheckForValidListAndQueue+0x60>)
 800398e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <prvCheckForValidListAndQueue+0x60>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <prvCheckForValidListAndQueue+0x60>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	490b      	ldr	r1, [pc, #44]	@ (80039cc <prvCheckForValidListAndQueue+0x7c>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd52 	bl	8002448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a4:	f000 f97a 	bl	8003c9c <vPortExitCritical>
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000c6c 	.word	0x20000c6c
 80039b4:	20000c3c 	.word	0x20000c3c
 80039b8:	20000c50 	.word	0x20000c50
 80039bc:	20000c64 	.word	0x20000c64
 80039c0:	20000c68 	.word	0x20000c68
 80039c4:	20000d18 	.word	0x20000d18
 80039c8:	20000c78 	.word	0x20000c78
 80039cc:	08004314 	.word	0x08004314

080039d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b04      	subs	r3, #4
 80039e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3b04      	subs	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f023 0201 	bic.w	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3b04      	subs	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a00:	4a0c      	ldr	r2, [pc, #48]	@ (8003a34 <pxPortInitialiseStack+0x64>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3b14      	subs	r3, #20
 8003a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b04      	subs	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f06f 0202 	mvn.w	r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3b20      	subs	r3, #32
 8003a24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a26:	68fb      	ldr	r3, [r7, #12]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	08003a39 	.word	0x08003a39

08003a38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a42:	4b13      	ldr	r3, [pc, #76]	@ (8003a90 <prvTaskExitError+0x58>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d00b      	beq.n	8003a64 <prvTaskExitError+0x2c>
	__asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	60fb      	str	r3, [r7, #12]
}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <prvTaskExitError+0x28>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	60bb      	str	r3, [r7, #8]
}
 8003a76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a78:	bf00      	nop
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0fc      	beq.n	8003a7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000010 	.word	0x20000010
	...

08003aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003aa0:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <pxCurrentTCBConst2>)
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	6808      	ldr	r0, [r1, #0]
 8003aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aaa:	f380 8809 	msr	PSP, r0
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f380 8811 	msr	BASEPRI, r0
 8003aba:	4770      	bx	lr
 8003abc:	f3af 8000 	nop.w

08003ac0 <pxCurrentTCBConst2>:
 8003ac0:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop

08003ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ac8:	4808      	ldr	r0, [pc, #32]	@ (8003aec <prvPortStartFirstTask+0x24>)
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	6800      	ldr	r0, [r0, #0]
 8003ace:	f380 8808 	msr	MSP, r0
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f380 8814 	msr	CONTROL, r0
 8003ada:	b662      	cpsie	i
 8003adc:	b661      	cpsie	f
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	df00      	svc	0
 8003ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003aea:	bf00      	nop
 8003aec:	e000ed08 	.word	0xe000ed08

08003af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003af6:	4b47      	ldr	r3, [pc, #284]	@ (8003c14 <xPortStartScheduler+0x124>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a47      	ldr	r2, [pc, #284]	@ (8003c18 <xPortStartScheduler+0x128>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d10b      	bne.n	8003b18 <xPortStartScheduler+0x28>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	613b      	str	r3, [r7, #16]
}
 8003b12:	bf00      	nop
 8003b14:	bf00      	nop
 8003b16:	e7fd      	b.n	8003b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b18:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <xPortStartScheduler+0x124>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c1c <xPortStartScheduler+0x12c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10b      	bne.n	8003b3a <xPortStartScheduler+0x4a>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	60fb      	str	r3, [r7, #12]
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <xPortStartScheduler+0x130>)
 8003b3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	22ff      	movs	r2, #255	@ 0xff
 8003b4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <xPortStartScheduler+0x134>)
 8003b60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b68:	e009      	b.n	8003b7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	4a2d      	ldr	r2, [pc, #180]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003b72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b86:	2b80      	cmp	r3, #128	@ 0x80
 8003b88:	d0ef      	beq.n	8003b6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b8a:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1c3 0307 	rsb	r3, r3, #7
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00b      	beq.n	8003bae <xPortStartScheduler+0xbe>
	__asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60bb      	str	r3, [r7, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	e7fd      	b.n	8003baa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bae:	4b1e      	ldr	r3, [pc, #120]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003bb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bc0:	4a19      	ldr	r2, [pc, #100]	@ (8003c28 <xPortStartScheduler+0x138>)
 8003bc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bcc:	4b17      	ldr	r3, [pc, #92]	@ (8003c2c <xPortStartScheduler+0x13c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	@ (8003c2c <xPortStartScheduler+0x13c>)
 8003bd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bd8:	4b14      	ldr	r3, [pc, #80]	@ (8003c2c <xPortStartScheduler+0x13c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <xPortStartScheduler+0x13c>)
 8003bde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003be2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003be4:	f000 f8da 	bl	8003d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003be8:	4b11      	ldr	r3, [pc, #68]	@ (8003c30 <xPortStartScheduler+0x140>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bee:	f000 f8f9 	bl	8003de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bf2:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <xPortStartScheduler+0x144>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8003c34 <xPortStartScheduler+0x144>)
 8003bf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003bfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003bfe:	f7ff ff63 	bl	8003ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c02:	f7ff f839 	bl	8002c78 <vTaskSwitchContext>
	prvTaskExitError();
 8003c06:	f7ff ff17 	bl	8003a38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	e000ed00 	.word	0xe000ed00
 8003c18:	410fc271 	.word	0x410fc271
 8003c1c:	410fc270 	.word	0x410fc270
 8003c20:	e000e400 	.word	0xe000e400
 8003c24:	20000d68 	.word	0x20000d68
 8003c28:	20000d6c 	.word	0x20000d6c
 8003c2c:	e000ed20 	.word	0xe000ed20
 8003c30:	20000010 	.word	0x20000010
 8003c34:	e000ef34 	.word	0xe000ef34

08003c38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	607b      	str	r3, [r7, #4]
}
 8003c50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c52:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <vPortEnterCritical+0x5c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	4a0e      	ldr	r2, [pc, #56]	@ (8003c94 <vPortEnterCritical+0x5c>)
 8003c5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <vPortEnterCritical+0x5c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d110      	bne.n	8003c86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c64:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <vPortEnterCritical+0x60>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <vPortEnterCritical+0x4e>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <vPortEnterCritical+0x4a>
	}
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000010 	.word	0x20000010
 8003c98:	e000ed04 	.word	0xe000ed04

08003c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ca2:	4b12      	ldr	r3, [pc, #72]	@ (8003cec <vPortExitCritical+0x50>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10b      	bne.n	8003cc2 <vPortExitCritical+0x26>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	607b      	str	r3, [r7, #4]
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	e7fd      	b.n	8003cbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <vPortExitCritical+0x50>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	4a08      	ldr	r2, [pc, #32]	@ (8003cec <vPortExitCritical+0x50>)
 8003cca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ccc:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <vPortExitCritical+0x50>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d105      	bne.n	8003ce0 <vPortExitCritical+0x44>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	f383 8811 	msr	BASEPRI, r3
}
 8003cde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	20000010 	.word	0x20000010

08003cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003cf0:	f3ef 8009 	mrs	r0, PSP
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <pxCurrentTCBConst>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	f01e 0f10 	tst.w	lr, #16
 8003d00:	bf08      	it	eq
 8003d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d0a:	6010      	str	r0, [r2, #0]
 8003d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d14:	f380 8811 	msr	BASEPRI, r0
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
 8003d20:	f7fe ffaa 	bl	8002c78 <vTaskSwitchContext>
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f380 8811 	msr	BASEPRI, r0
 8003d2c:	bc09      	pop	{r0, r3}
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	6808      	ldr	r0, [r1, #0]
 8003d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d36:	f01e 0f10 	tst.w	lr, #16
 8003d3a:	bf08      	it	eq
 8003d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d40:	f380 8809 	msr	PSP, r0
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w

08003d50 <pxCurrentTCBConst>:
 8003d50:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop

08003d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	607b      	str	r3, [r7, #4]
}
 8003d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d72:	f7fe fec7 	bl	8002b04 <xTaskIncrementTick>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <xPortSysTickHandler+0x40>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f383 8811 	msr	BASEPRI, r3
}
 8003d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d90:	bf00      	nop
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <vPortSetupTimerInterrupt+0x34>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <vPortSetupTimerInterrupt+0x38>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dac:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <vPortSetupTimerInterrupt+0x3c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ddc <vPortSetupTimerInterrupt+0x40>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	099b      	lsrs	r3, r3, #6
 8003db8:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <vPortSetupTimerInterrupt+0x44>)
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dbe:	4b04      	ldr	r3, [pc, #16]	@ (8003dd0 <vPortSetupTimerInterrupt+0x34>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e010 	.word	0xe000e010
 8003dd4:	e000e018 	.word	0xe000e018
 8003dd8:	20000004 	.word	0x20000004
 8003ddc:	10624dd3 	.word	0x10624dd3
 8003de0:	e000e014 	.word	0xe000e014

08003de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003de4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003df4 <vPortEnableVFP+0x10>
 8003de8:	6801      	ldr	r1, [r0, #0]
 8003dea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003dee:	6001      	str	r1, [r0, #0]
 8003df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003df2:	bf00      	nop
 8003df4:	e000ed88 	.word	0xe000ed88

08003df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003dfe:	f3ef 8305 	mrs	r3, IPSR
 8003e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	d915      	bls.n	8003e36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e0a:	4a18      	ldr	r2, [pc, #96]	@ (8003e6c <vPortValidateInterruptPriority+0x74>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e14:	4b16      	ldr	r3, [pc, #88]	@ (8003e70 <vPortValidateInterruptPriority+0x78>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	7afa      	ldrb	r2, [r7, #11]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20b      	bcs.n	8003e36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	607b      	str	r3, [r7, #4]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e36:	4b0f      	ldr	r3, [pc, #60]	@ (8003e74 <vPortValidateInterruptPriority+0x7c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e78 <vPortValidateInterruptPriority+0x80>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d90b      	bls.n	8003e5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	603b      	str	r3, [r7, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	e7fd      	b.n	8003e5a <vPortValidateInterruptPriority+0x62>
	}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e3f0 	.word	0xe000e3f0
 8003e70:	20000d68 	.word	0x20000d68
 8003e74:	e000ed0c 	.word	0xe000ed0c
 8003e78:	20000d6c 	.word	0x20000d6c

08003e7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e88:	f7fe fd80 	bl	800298c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8004000 <pvPortMalloc+0x184>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e94:	f000 f924 	bl	80040e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e98:	4b5a      	ldr	r3, [pc, #360]	@ (8004004 <pvPortMalloc+0x188>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8095 	bne.w	8003fd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01e      	beq.n	8003eea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003eac:	2208      	movs	r2, #8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d015      	beq.n	8003eea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f023 0307 	bic.w	r3, r3, #7
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <pvPortMalloc+0x6e>
	__asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	617b      	str	r3, [r7, #20]
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	e7fd      	b.n	8003ee6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d06f      	beq.n	8003fd0 <pvPortMalloc+0x154>
 8003ef0:	4b45      	ldr	r3, [pc, #276]	@ (8004008 <pvPortMalloc+0x18c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d86a      	bhi.n	8003fd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003efa:	4b44      	ldr	r3, [pc, #272]	@ (800400c <pvPortMalloc+0x190>)
 8003efc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003efe:	4b43      	ldr	r3, [pc, #268]	@ (800400c <pvPortMalloc+0x190>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f04:	e004      	b.n	8003f10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d903      	bls.n	8003f22 <pvPortMalloc+0xa6>
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1f1      	bne.n	8003f06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f22:	4b37      	ldr	r3, [pc, #220]	@ (8004000 <pvPortMalloc+0x184>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d051      	beq.n	8003fd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2208      	movs	r2, #8
 8003f32:	4413      	add	r3, r2
 8003f34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1ad2      	subs	r2, r2, r3
 8003f46:	2308      	movs	r3, #8
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d920      	bls.n	8003f90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <pvPortMalloc+0xfc>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	613b      	str	r3, [r7, #16]
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f8a:	69b8      	ldr	r0, [r7, #24]
 8003f8c:	f000 f90a 	bl	80041a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f90:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <pvPortMalloc+0x18c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004008 <pvPortMalloc+0x18c>)
 8003f9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004008 <pvPortMalloc+0x18c>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <pvPortMalloc+0x194>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d203      	bcs.n	8003fb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003faa:	4b17      	ldr	r3, [pc, #92]	@ (8004008 <pvPortMalloc+0x18c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a18      	ldr	r2, [pc, #96]	@ (8004010 <pvPortMalloc+0x194>)
 8003fb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4b13      	ldr	r3, [pc, #76]	@ (8004004 <pvPortMalloc+0x188>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <pvPortMalloc+0x198>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a11      	ldr	r2, [pc, #68]	@ (8004014 <pvPortMalloc+0x198>)
 8003fce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003fd0:	f7fe fcea 	bl	80029a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <pvPortMalloc+0x17a>
	__asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60fb      	str	r3, [r7, #12]
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	e7fd      	b.n	8003ff2 <pvPortMalloc+0x176>
	return pvReturn;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	@ 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20001b88 	.word	0x20001b88
 8004004:	20001b9c 	.word	0x20001b9c
 8004008:	20001b8c 	.word	0x20001b8c
 800400c:	20001b80 	.word	0x20001b80
 8004010:	20001b90 	.word	0x20001b90
 8004014:	20001b94 	.word	0x20001b94

08004018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04f      	beq.n	80040ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800402a:	2308      	movs	r3, #8
 800402c:	425b      	negs	r3, r3
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4413      	add	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <vPortFree+0xbc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <vPortFree+0x46>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	60fb      	str	r3, [r7, #12]
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <vPortFree+0x66>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60bb      	str	r3, [r7, #8]
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	e7fd      	b.n	800407a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <vPortFree+0xbc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01e      	beq.n	80040ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d11a      	bne.n	80040ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <vPortFree+0xbc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040a4:	f7fe fc72 	bl	800298c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <vPortFree+0xc0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <vPortFree+0xc0>)
 80040b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040b6:	6938      	ldr	r0, [r7, #16]
 80040b8:	f000 f874 	bl	80041a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040bc:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <vPortFree+0xc4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	4a06      	ldr	r2, [pc, #24]	@ (80040dc <vPortFree+0xc4>)
 80040c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040c6:	f7fe fc6f 	bl	80029a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040ca:	bf00      	nop
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20001b9c 	.word	0x20001b9c
 80040d8:	20001b8c 	.word	0x20001b8c
 80040dc:	20001b98 	.word	0x20001b98

080040e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80040e6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80040ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80040ec:	4b27      	ldr	r3, [pc, #156]	@ (800418c <prvHeapInit+0xac>)
 80040ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3307      	adds	r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	4a1f      	ldr	r2, [pc, #124]	@ (800418c <prvHeapInit+0xac>)
 8004110:	4413      	add	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <prvHeapInit+0xb0>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800411e:	4b1c      	ldr	r3, [pc, #112]	@ (8004190 <prvHeapInit+0xb0>)
 8004120:	2200      	movs	r2, #0
 8004122:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4413      	add	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800412c:	2208      	movs	r2, #8
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a15      	ldr	r2, [pc, #84]	@ (8004194 <prvHeapInit+0xb4>)
 8004140:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <prvHeapInit+0xb4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800414a:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <prvHeapInit+0xb4>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	1ad2      	subs	r2, r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004160:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <prvHeapInit+0xb4>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <prvHeapInit+0xb8>)
 800416e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a09      	ldr	r2, [pc, #36]	@ (800419c <prvHeapInit+0xbc>)
 8004176:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004178:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <prvHeapInit+0xc0>)
 800417a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800417e:	601a      	str	r2, [r3, #0]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	20000d70 	.word	0x20000d70
 8004190:	20001b80 	.word	0x20001b80
 8004194:	20001b88 	.word	0x20001b88
 8004198:	20001b90 	.word	0x20001b90
 800419c:	20001b8c 	.word	0x20001b8c
 80041a0:	20001b9c 	.word	0x20001b9c

080041a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041ac:	4b28      	ldr	r3, [pc, #160]	@ (8004250 <prvInsertBlockIntoFreeList+0xac>)
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e002      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x14>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d8f7      	bhi.n	80041b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4413      	add	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d108      	bne.n	80041e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d118      	bne.n	800422c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b15      	ldr	r3, [pc, #84]	@ (8004254 <prvInsertBlockIntoFreeList+0xb0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d00d      	beq.n	8004222 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e008      	b.n	8004234 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004222:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <prvInsertBlockIntoFreeList+0xb0>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e003      	b.n	8004234 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d002      	beq.n	8004242 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20001b80 	.word	0x20001b80
 8004254:	20001b88 	.word	0x20001b88

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	@ (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	@ (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	@ (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	@ (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f826 	bl	80042cc <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	080043a0 	.word	0x080043a0
 80042a4:	080043a0 	.word	0x080043a0
 80042a8:	080043a0 	.word	0x080043a0
 80042ac:	080043a4 	.word	0x080043a4

080042b0 <memcpy>:
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b8:	d100      	bne.n	80042bc <memcpy+0xc>
 80042ba:	4770      	bx	lr
 80042bc:	b510      	push	{r4, lr}
 80042be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d1f9      	bne.n	80042be <memcpy+0xe>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <_init>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr

080042d8 <_fini>:
 80042d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042da:	bf00      	nop
 80042dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042de:	bc08      	pop	{r3}
 80042e0:	469e      	mov	lr, r3
 80042e2:	4770      	bx	lr
